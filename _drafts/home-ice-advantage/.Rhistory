summary(AZ_2013_2014_model)
summary(AZ_2014_2015_model)
AZ_2013_2014 <- reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20132014")
AZ_2014_2015 <- reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20142015")
AZ_2015_2016 <- reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20152016")
AZ_2016_2017 <- reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20162017")
AZ_2013_2014_model <- lm(score_diff ~ date, data = AZ_2013_2014)
AZ_2014_2015_model <- lm(score_diff ~ date, data = AZ_2014_2015)
AZ_2015_2016_model <- lm(score_diff ~ date, data = AZ_2015_2016)
AZ_2016_2017_model <- lm(score_diff ~ date, data = AZ_2016_2017)
summary(AZ_2014_2015_model)
summary(AZ_2016_2017_model)
summary(AZ_2015_2016_model)
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20132014") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20142015") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20152016") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20162017") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
library(modelr)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
library(modelr)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
AZ_by
library(modelr)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
AZ_by_season
?map
map()
library(modelr)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
season_lm <- function(df) {
lm(score_diff ~ date, data = df)
}
AZ_by_season <- AZ_by_season %>%
mutate(model = map(data, season_lm))
library(modelr)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
season_lm <- function(df) {
lm(score_diff ~ date, data = df)
}
AZ_by_season <- AZ_by_season %>%
mutate(model = map(data, season_lm))
AZ_by_season
library(modelr)
library(broom)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
season_lm <- function(df) {
lm(score_diff ~ date, data = df)
}
AZ_by_season <- AZ_by_season %>%
mutate(model = map(data, season_lm)) %>%
mutate(lm_stats = map(model, glance)) %>%
unnest(lm_stats)
AZ_by_season
library(modelr)
library(broom)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
season_lm <- function(df) {
lm(score_diff ~ date, data = df)
}
AZ_by_season <- AZ_by_season %>%
mutate(model = map(data, season_lm)) %>%
mutate(lm_stats = map(model, glance)) %>%
unnest(lm_stats)
AZ_by_season %>% select(season, p.value)
library(tidyverse)
library(lubridate)
games <- read_csv("games.csv")
reg_season_games <- games %>%
filter(game_type == "R")
dim(reg_season_games)
home_games_by_team <- reg_season_games %>%
group_by(home_team) %>%
count() %>%
rename(home_game_count = n, team = home_team)
away_games_by_team <- reg_season_games %>%
group_by(away_team) %>%
count() %>%
rename(away_game_count = n, team  = away_team)
game_counts_by_team <- home_games_by_team %>%
left_join(away_games_by_team)
game_counts_by_team %>%
arrange(home_game_count) %>%
head()
game_counts_by_team %>%
arrange(home_game_count) %>%
tail()
home_games_by_team <- reg_season_games %>%
group_by(home_team) %>%
count() %>%
rename(home_game_count = n, team = home_team)
away_games_by_team <- reg_season_games %>%
group_by(away_team) %>%
count() %>%
rename(away_game_count = n, team  = away_team)
game_counts_by_team <- home_games_by_team %>%
left_join(away_games_by_team)
game_counts_by_team %>%
arrange(home_game_count) %>%
head()
game_counts_by_team %>%
arrange(home_game_count) %>%
tail()
games$home_team[games$home_team == "Phoenix Coyotes"] = "Arizona Coyotes"
games$away_team[games$away_team == "Phoenix Coyotes"] = "Arizona Coyotes"
reg_season_games <- games %>%
filter(game_type == "R")
home_games_by_team <- reg_season_games %>%
group_by(home_team) %>%
count() %>%
rename(home_game_count = n, team = home_team)
away_games_by_team <- reg_season_games %>%
group_by(away_team) %>%
count() %>%
rename(away_game_count = n, team  = away_team)
game_counts_by_team <- home_games_by_team %>%
left_join(away_games_by_team)
game_counts_by_team
# Get the count of each home_team away_team pair
game_balance_by_pairs <- reg_season_games %>%
select(home_team, away_team) %>%
group_by(home_team, away_team) %>%
count() %>%
rename(home_game_count = n)
# Add the total for each matchup, regardless of which team was home or away
game_balance_by_pairs <- game_balance_by_pairs %>%
mutate(matchup_count = home_game_count +
game_balance_by_pairs[(game_balance_by_pairs$home_team == away_team &
game_balance_by_pairs$away_team == home_team),
'home_game_count'][[1]])
game_balance_by_pairs <- game_balance_by_pairs %>%
mutate(home_game_proportion = home_game_count / matchup_count)
game_balance_by_pairs %>% ggplot(aes(x = home_team, y = away_team)) +
geom_tile(aes(fill = home_game_proportion)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
ggtitle("Proportion of Games Played at Home for All\nPairs of NHL Teams (2012 - 2017)")
min(game_balance_by_pairs$home_game_proportion)
max(game_balance_by_pairs$home_game_proportion)
reg_season_games <- reg_season_games %>%
mutate(score_diff = home_team_score - away_team_score)
reg_season_games %>%
count(score_diff) %>%
ggplot(aes(x = score_diff, y = n)) +
geom_col()
reg_season_games %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point(alpha = 0.2)
teams <- reg_season_games$home_team %>% unique() %>% sort()
reg_season_games %>%
filter(home_team %in% teams[1:10]) %>%
group_by(home_team) %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point(alpha = 0.2) +
geom_smooth() +
facet_wrap(~home_team, ncol = 5)
reg_season_games %>%
filter(home_team %in% teams[11:20]) %>%
group_by(home_team) %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point(alpha = 0.2) +
geom_smooth() +
facet_wrap(~home_team, ncol = 5)
reg_season_games %>%
filter(home_team %in% teams[21:30]) %>%
group_by(home_team) %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point(alpha = 0.2) +
geom_smooth() +
facet_wrap(~home_team, ncol = 5)
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20132014") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20142015") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20152016") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20162017") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
library(modelr)
library(broom)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
season_lm <- function(df) {
lm(score_diff ~ date, data = df)
}
AZ_by_season <- AZ_by_season %>%
mutate(model = map(data, season_lm)) %>%
mutate(lm_stats = map(model, glance)) %>%
unnest(lm_stats)
AZ_by_season %>% select(season, p.value)
library(modelr)
library(broom)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
season_lm <- function(df) {
lm(score_diff ~ date, data = df)
}
AZ_by_season <- AZ_by_season %>%
mutate(model = map(data, season_lm)) %>%
mutate(lm_stats = map(model, glance)) %>%
unnest(lm_stats)
#AZ_by_season %>% select(season, p.value)
View(AZ_by_season)
library(modelr)
library(broom)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
season_lm <- function(df) {
lm(score_diff ~ date, data = df)
}
AZ_by_season <- AZ_by_season %>%
mutate(model = map(data, season_lm)) %>%
mutate(lm_stats = map(model, glance)) %>%
unnest(lm_stats)
AZ_by_season %>% select(season, model, p.value)
lm_by_team_and_season <- reg_season_games %>%
group_by(home_team, season) %>%
nest()
lm_by_team_and_season <- lm_by_team_and_season %>%
mutate(model = map(data, season_lm)) %>%
mutate(lm_stats = map(model, glance)) %>%
unnest(lm_stats)
lm_by_team_and_season %>%
select(season, model, p.value) %>%
arrange(p.value)
lm_by_team_and_season <- reg_season_games %>%
group_by(home_team, season) %>%
nest()
lm_by_team_and_season <- lm_by_team_and_season %>%
mutate(model = map(data, season_lm)) %>%
mutate(lm_stats = map(model, glance)) %>%
unnest(lm_stats)
lm_by_team_and_season %>%
select(home_team, season, model, p.value) %>%
arrange(p.value)
reg_season_games %>%
filter(home_team == "Anaheim Ducks", season == "20132014") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Anaheim Ducks", season == "20152016") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Pittsburgh Penguins", season == "20132014") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Pittsburgh Penguins", season == "20152016") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "New York Rangers", season == "20162017") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
t.test(reg_season_games$home_team_score,
reg_season_games$away_team_score,
paired = TRUE,
conf.level = 0.95)
mean(reg_season_games$home_team_score)
mean(reg_season_games$away_team_score)
t.test(reg_season_games$home_team_score,
reg_season_games$away_team_score,
paired = TRUE,
conf.level = 0.95)
mean(reg_season_games$home_team_score) - mean(reg_season_games$away_team_score)
2.86 * 0.05
t.test(reg_season_games$home_team_score,
reg_season_games$away_team_score,
paired = TRUE,
conf.level = 0.95)
mean(reg_season_games$score_diff > 0)
library(BEST)
library(BEST)
install.packages("rjags")
install.packages("rjags")
library(BEST)
install.packages("BEST")
install.packages("rjags")
install.packages("rjags")
library(BEST)
library(BEST)
best_results <- BESTmcmc(reg_season_games$score_diff, priors = NULL, parallel = FALSE)
library(tidyverse)
library(lubridate)
games <- read_csv("games.csv")
library(BEST)
best_results <- BESTmcmc(reg_season_games$score_diff, priors = NULL, parallel = FALSE)
reg_season_games <- games %>%
filter(game_type == "R")
dim(reg_season_games)
home_games_by_team <- reg_season_games %>%
group_by(home_team) %>%
count() %>%
rename(home_game_count = n, team = home_team)
away_games_by_team <- reg_season_games %>%
group_by(away_team) %>%
count() %>%
rename(away_game_count = n, team  = away_team)
game_counts_by_team <- home_games_by_team %>%
left_join(away_games_by_team)
game_counts_by_team %>%
arrange(home_game_count) %>%
head()
game_counts_by_team %>%
arrange(home_game_count) %>%
tail()
games$home_team[games$home_team == "Phoenix Coyotes"] = "Arizona Coyotes"
games$away_team[games$away_team == "Phoenix Coyotes"] = "Arizona Coyotes"
reg_season_games <- games %>%
filter(game_type == "R")
home_games_by_team <- reg_season_games %>%
group_by(home_team) %>%
count() %>%
rename(home_game_count = n, team = home_team)
away_games_by_team <- reg_season_games %>%
group_by(away_team) %>%
count() %>%
rename(away_game_count = n, team  = away_team)
game_counts_by_team <- home_games_by_team %>%
left_join(away_games_by_team)
game_counts_by_team
# Get the count of each home_team away_team pair
game_balance_by_pairs <- reg_season_games %>%
select(home_team, away_team) %>%
group_by(home_team, away_team) %>%
count() %>%
rename(home_game_count = n)
# Add the total for each matchup, regardless of which team was home or away
game_balance_by_pairs <- game_balance_by_pairs %>%
mutate(matchup_count = home_game_count +
game_balance_by_pairs[(game_balance_by_pairs$home_team == away_team &
game_balance_by_pairs$away_team == home_team),
'home_game_count'][[1]])
game_balance_by_pairs <- game_balance_by_pairs %>%
mutate(home_game_proportion = home_game_count / matchup_count)
game_balance_by_pairs %>% ggplot(aes(x = home_team, y = away_team)) +
geom_tile(aes(fill = home_game_proportion)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
ggtitle("Proportion of Games Played at Home for All\nPairs of NHL Teams (2012 - 2017)")
min(game_balance_by_pairs$home_game_proportion)
max(game_balance_by_pairs$home_game_proportion)
reg_season_games <- reg_season_games %>%
mutate(score_diff = home_team_score - away_team_score)
reg_season_games %>%
count(score_diff) %>%
ggplot(aes(x = score_diff, y = n)) +
geom_col()
reg_season_games %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point(alpha = 0.2)
teams <- reg_season_games$home_team %>% unique() %>% sort()
reg_season_games %>%
filter(home_team %in% teams[1:10]) %>%
group_by(home_team) %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point(alpha = 0.2) +
geom_smooth() +
facet_wrap(~home_team, ncol = 5)
reg_season_games %>%
filter(home_team %in% teams[11:20]) %>%
group_by(home_team) %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point(alpha = 0.2) +
geom_smooth() +
facet_wrap(~home_team, ncol = 5)
reg_season_games %>%
filter(home_team %in% teams[21:30]) %>%
group_by(home_team) %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point(alpha = 0.2) +
geom_smooth() +
facet_wrap(~home_team, ncol = 5)
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20132014") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20142015") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20152016") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Arizona Coyotes", season == "20162017") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
library(modelr)
library(broom)
AZ_by_season <- reg_season_games %>%
filter(home_team == "Arizona Coyotes") %>%
group_by(season) %>%
nest()
season_lm <- function(df) {
lm(score_diff ~ date, data = df)
}
AZ_by_season <- AZ_by_season %>%
mutate(model = map(data, season_lm)) %>%
mutate(lm_stats = map(model, glance)) %>%
unnest(lm_stats)
AZ_by_season %>% select(season, model, p.value)
lm_by_team_and_season <- reg_season_games %>%
group_by(home_team, season) %>%
nest()
lm_by_team_and_season <- lm_by_team_and_season %>%
mutate(model = map(data, season_lm)) %>%
mutate(lm_stats = map(model, glance)) %>%
unnest(lm_stats)
lm_by_team_and_season %>%
select(home_team, season, model, p.value) %>%
arrange(p.value)
reg_season_games %>%
filter(home_team == "Anaheim Ducks", season == "20132014") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Anaheim Ducks", season == "20152016") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Pittsburgh Penguins", season == "20132014") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "Pittsburgh Penguins", season == "20152016") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
reg_season_games %>%
filter(home_team == "New York Rangers", season == "20162017") %>%
ggplot(aes(x = date, y = score_diff)) +
geom_point() +
geom_smooth(method = "lm")
t.test(reg_season_games$home_team_score,
reg_season_games$away_team_score,
paired = TRUE,
conf.level = 0.95)
library(BEST)
best_results <- BESTmcmc(reg_season_games$score_diff, priors = NULL, parallel = FALSE)
plot(best_results)
best_results
