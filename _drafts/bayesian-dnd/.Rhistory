geom_raster(aes(fill = pdf)) +
coord_equal(xlim = c(0,1), ylim = c(0, .85))
pdf <- function(v) ddirichlet(v, c(5, 5, 15))
mesh <- simplex_mesh(.0025) %>% as.data.frame %>% tbl_df
mesh$pdf <- mesh %>% apply(1, function(v) pdf(bary2simp(v)))
ggplot(mesh, aes(x, y)) +
geom_raster(aes(fill = pdf)) +
coord_equal(xlim = c(0,1), ylim = c(0, .85))
bayesian_dice_analysis <- function(roll_data, faces = 20, beta_prior_a = 1, beta_prior_b = 1) {
faces_start <- 1
faces_sep <- 1
# Deal with the d100. It has 10 faces starting at 0 instead of 1 and increasing in increments of 10.
if (faces == 100) {
roll_data <- as.numeric(roll_data)
faces_start <- 0
faces_sep <- 10
}
# Check that no rolls fall outside 1:faces
if ((sum(roll_data > faces) + sum(roll_data < 0)) > 0) {
stop(sprintf("Values outside the range 0 to %i were found in the data. Please ensure the faces parameter is correct and check that the data is valid.", faces))
}
# Check that alpha and beta are non-negative
if (beta_prior_a < 0 || beta_prior_b < 0) {
stop("The alpha and beta priors must both be non-negtive. Please ensure the values specified are correct.")
}
results_table <- tibble(face = seq(from = faces_start, to = faces_start + (faces - faces_sep), by = faces_sep))
# Figure our the number of successes per face
# Not sure how to do this inside a mutate function below
successes <- c()
for (i in results_table$face) {
successes <- rbind(successes, sum(roll_data == i))
}
# Add columns for the count of binomial successes and failures
results_table <- results_table %>%
mutate(successes = successes,
failures = length(roll_data) - successes)
# Add the values related to the posterior distribution
results_table <- results_table %>%
mutate(beta_post_a = beta_prior_a + successes,
beta_post_b = beta_prior_b + failures,
posterior_mean = beta_post_a / (beta_post_a + beta_post_b),
posterior_median = qbeta(0.5, beta_post_a, beta_post_b),
posterior_mode = (beta_post_a - 1) / (beta_post_a + beta_post_b - 2),
ci_95_lower = qbeta(0.025, beta_post_a, beta_post_b),
ci_95_upper = qbeta(0.975, beta_post_a, beta_post_b))
return(results_table)
}
d10_data <- read_csv("d10.csv")
d10_result <- bayesian_dice_analysis(d10_data$Rolls, faces = 10, beta_prior_a = 10, beta_prior_b = 90)
ggplot(d10_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 0.10, color = "red")) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d10 Dice")
d20_data <- read_csv("d20.csv")
d20_result <- bayesian_dice_analysis(d20_data$Rolls, faces = 20, beta_prior_a = 5, beta_prior_b = 95)
ggplot(d20_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 0.05, color = "red")) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d20 Dice")
d12_data <- read_csv("d12.csv")
d12_result <- bayesian_dice_analysis(d12_data$Rolls, faces = 12, beta_prior_a = 100/12, beta_prior_b = 11 * 100/12)
ggplot(d12_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 1/12, color = "red")) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d12 Dice")
d100_data <- read_csv("d100.csv")
d100_result <- bayesian_dice_analysis(d100_data$Rolls, faces = 100, beta_prior_a = 100/10, beta_prior_b = 9 * 100/10)
ggplot(d100_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 1/10, color = "red")) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d100 Dice")
d8_data <- read_csv("d8.csv")
d8_result <- bayesian_dice_analysis(d8_data$Rolls, faces = 8, beta_prior_a = 100/8, beta_prior_b = 7 * 100/8)
ggplot(d8_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 1/8, color = "red")) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d8 Dice")
d6_data <- read_csv("d6.csv")
d6_result <- bayesian_dice_analysis(d6_data$Rolls, faces = 6, beta_prior_a = 100/6, beta_prior_b = 5 * 100/6)
ggplot(d6_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 1/6, color = "red")) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d6 Dice")
d4_data <- read_csv("d4.csv")
d4_result <- bayesian_dice_analysis(d4_data$Rolls, faces = 4, beta_prior_a = 100/4, beta_prior_b = 3 * 100/4)
ggplot(d4_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 1/4, color = "red")) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d4 Dice")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dirichlet)
d100_data <- read_csv("d100.csv")
d100_result <- bayesian_dice_analysis(d100_data$Rolls, faces = 100, beta_prior_a = 100/10, beta_prior_b = 9 * 100/10)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dirichlet)
binom_data <- tibble(k = c(0:20), prob = dbinom(x = c(1:20), size = 20, prob = rep(0.5,21)))
ggplot(data = binom_data) +
geom_col(aes(x = k , y = prob)) +
labs(title = "Binomial Distribution for Twenty Coin Flips",
x = "k Successes",
y = "Probability of Observing k Successes") +
theme(legend.position="none")
ggplot(data.frame(x = c(0:1))) +
stat_function(fun = dbeta,
args = list(shape1 = 1, shape2 = 1)) +
stat_function(fun = dbeta,
args = list(shape1 = 1, shape2 = 1),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5)) +
labs(title = "Beta(1,1) Distribution",
x = "Binomial probability, p",
y = "Probability density of p") +
theme(legend.position="none")
ggplot(data.frame(x = c(0:1))) +
stat_function(fun = dbeta,
args = list(shape1 = 1, shape2 = 19)) +
stat_function(fun = dbeta,
args = list(shape1 = 1, shape2 = 19),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5)) +
labs(title = "Beta(1,19) Distribution",
x = "Binomial probability, p",
y = "Probability density of p") +
theme(legend.position="none")
ggplot(data.frame(x = c(0:1))) +
stat_function(fun = dbeta,
args = list(shape1 = 5, shape2 = 95)) +
stat_function(fun = dbeta,
args = list(shape1 = 5, shape2 = 95),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5)) +
labs(title = "Beta(5,95) Distribution",
x = "Binomial probability, p",
y = "Probability density of p") +
theme(legend.position="none")
ggplot(data.frame(x = c(0:1))) +
stat_function(fun = dbeta,
args = list(shape1 = 5, shape2 = 95),
color = "blue") +
stat_function(fun = dbeta,
args = list(shape1 = 5, shape2 = 95),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5),
fill = "blue") +
stat_function(fun = dbeta,
args = list(shape1 = 25, shape2 = 175),
color = "red") +
stat_function(fun = dbeta,
args = list(shape1 = 25, shape2 = 175),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5),
fill = "red") +
labs(title = "Beta(5,95) Prior Distribution and Beta(25,175) Posterior Distribution",
x = "Binomial probability, p",
y = "Probability density of p") +
theme(legend.position="none")
ggplot(data.frame(x = c(0:1))) +
stat_function(fun = dbeta,
args = list(shape1 = 25, shape2 = 175),
color = "blue") +
stat_function(fun = dbeta,
args = list(shape1 = 25, shape2 = 175),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5),
fill = "blue") +
stat_function(fun = dbeta,
args = list(shape1 = 228, shape2 = 972),
color = "red") +
stat_function(fun = dbeta,
args = list(shape1 = 228, shape2 = 972),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5),
fill = "red") +
labs(title = "Beta(25,792) Prior Distribution and Beta(228,972) Posterior Distribution",
x = "Binomial probability, p",
y = "Probability density of p") +
theme(legend.position="none")
pdf <- function(v) ddirichlet(v, c(5, 5, 5))
mesh <- simplex_mesh(.0025) %>% as.data.frame %>% tbl_df
mesh$pdf <- mesh %>% apply(1, function(v) pdf(bary2simp(v)))
ggplot(mesh, aes(x, y)) +
geom_raster(aes(fill = pdf)) +
coord_equal(xlim = c(0,1), ylim = c(0, .85))
pdf <- function(v) ddirichlet(v, c(5, 5, 15))
mesh <- simplex_mesh(.0025) %>% as.data.frame %>% tbl_df
mesh$pdf <- mesh %>% apply(1, function(v) pdf(bary2simp(v)))
ggplot(mesh, aes(x, y)) +
geom_raster(aes(fill = pdf)) +
coord_equal(xlim = c(0,1), ylim = c(0, .85))
bayesian_dice_analysis <- function(roll_data, faces = 20, beta_prior_a = 1, beta_prior_b = 1) {
faces_start <- 1
faces_sep <- 1
# Deal with the d100. It has 10 faces starting at 0 instead of 1 and increasing in increments of 10.
if (faces == 100) {
roll_data <- as.numeric(roll_data)
faces_start <- 0
faces_sep <- 10
}
# Check that no rolls are non-numeric
if (sum(is.na(roll_data)) > 0) {
stop("Non-numeric rolls were found in the data. Please ensure that the data is valid.")
}
# Check that no rolls fall outside 1:faces
if ((sum(roll_data > faces) + sum(roll_data < 0)) > 0) {
stop(sprintf("Values outside the range 0 to %i were found in the data. Please ensure the faces parameter is correct and check that the data is valid.", faces))
}
# Check that alpha and beta are non-negative
if (beta_prior_a < 0 || beta_prior_b < 0) {
stop("The alpha and beta priors must both be non-negtive. Please ensure the values specified are correct.")
}
results_table <- tibble(face = seq(from = faces_start, to = faces_start + (faces - faces_sep), by = faces_sep))
# Figure our the number of successes per face
# Not sure how to do this inside a mutate function below
successes <- c()
for (i in results_table$face) {
successes <- rbind(successes, sum(roll_data == i))
}
# Add columns for the count of binomial successes and failures
results_table <- results_table %>%
mutate(successes = successes,
failures = length(roll_data) - successes)
# Add the values related to the posterior distribution
results_table <- results_table %>%
mutate(beta_post_a = beta_prior_a + successes,
beta_post_b = beta_prior_b + failures,
posterior_mean = beta_post_a / (beta_post_a + beta_post_b),
posterior_median = qbeta(0.5, beta_post_a, beta_post_b),
posterior_mode = (beta_post_a - 1) / (beta_post_a + beta_post_b - 2),
ci_95_lower = qbeta(0.025, beta_post_a, beta_post_b),
ci_95_upper = qbeta(0.975, beta_post_a, beta_post_b))
return(results_table)
}
d10_data <- read_csv("d10.csv")
d10_result <- bayesian_dice_analysis(d10_data$Rolls, faces = 10, beta_prior_a = 10, beta_prior_b = 90)
ggplot(d10_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 0.10, color = "red")) +
scale_x_continuous(breaks = round(seq(from = 0, to = 10 by = 1))) +
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dirichlet)
binom_data <- tibble(k = c(0:20), prob = dbinom(x = c(1:20), size = 20, prob = rep(0.5,21)))
ggplot(data = binom_data) +
geom_col(aes(x = k , y = prob)) +
labs(title = "Binomial Distribution for Twenty Coin Flips",
x = "k Successes",
y = "Probability of Observing k Successes") +
theme(legend.position="none")
ggplot(data.frame(x = c(0:1))) +
stat_function(fun = dbeta,
args = list(shape1 = 1, shape2 = 1)) +
stat_function(fun = dbeta,
args = list(shape1 = 1, shape2 = 1),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5)) +
labs(title = "Beta(1,1) Distribution",
x = "Binomial probability, p",
y = "Probability density of p") +
theme(legend.position="none")
ggplot(data.frame(x = c(0:1))) +
stat_function(fun = dbeta,
args = list(shape1 = 1, shape2 = 19)) +
stat_function(fun = dbeta,
args = list(shape1 = 1, shape2 = 19),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5)) +
labs(title = "Beta(1,19) Distribution",
x = "Binomial probability, p",
y = "Probability density of p") +
theme(legend.position="none")
ggplot(data.frame(x = c(0:1))) +
stat_function(fun = dbeta,
args = list(shape1 = 5, shape2 = 95)) +
stat_function(fun = dbeta,
args = list(shape1 = 5, shape2 = 95),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5)) +
labs(title = "Beta(5,95) Distribution",
x = "Binomial probability, p",
y = "Probability density of p") +
theme(legend.position="none")
ggplot(data.frame(x = c(0:1))) +
stat_function(fun = dbeta,
args = list(shape1 = 5, shape2 = 95),
color = "blue") +
stat_function(fun = dbeta,
args = list(shape1 = 5, shape2 = 95),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5),
fill = "blue") +
stat_function(fun = dbeta,
args = list(shape1 = 25, shape2 = 175),
color = "red") +
stat_function(fun = dbeta,
args = list(shape1 = 25, shape2 = 175),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5),
fill = "red") +
labs(title = "Beta(5,95) Prior Distribution and Beta(25,175) Posterior Distribution",
x = "Binomial probability, p",
y = "Probability density of p") +
theme(legend.position="none")
ggplot(data.frame(x = c(0:1))) +
stat_function(fun = dbeta,
args = list(shape1 = 25, shape2 = 175),
color = "blue") +
stat_function(fun = dbeta,
args = list(shape1 = 25, shape2 = 175),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5),
fill = "blue") +
stat_function(fun = dbeta,
args = list(shape1 = 228, shape2 = 972),
color = "red") +
stat_function(fun = dbeta,
args = list(shape1 = 228, shape2 = 972),
xlim = c(0,1),
geom = "area",
aes(x, alpha = 0.5),
fill = "red") +
labs(title = "Beta(25,792) Prior Distribution and Beta(228,972) Posterior Distribution",
x = "Binomial probability, p",
y = "Probability density of p") +
theme(legend.position="none")
pdf <- function(v) ddirichlet(v, c(5, 5, 5))
mesh <- simplex_mesh(.0025) %>% as.data.frame %>% tbl_df
mesh$pdf <- mesh %>% apply(1, function(v) pdf(bary2simp(v)))
ggplot(mesh, aes(x, y)) +
geom_raster(aes(fill = pdf)) +
coord_equal(xlim = c(0,1), ylim = c(0, .85))
pdf <- function(v) ddirichlet(v, c(5, 5, 15))
mesh <- simplex_mesh(.0025) %>% as.data.frame %>% tbl_df
mesh$pdf <- mesh %>% apply(1, function(v) pdf(bary2simp(v)))
ggplot(mesh, aes(x, y)) +
geom_raster(aes(fill = pdf)) +
coord_equal(xlim = c(0,1), ylim = c(0, .85))
bayesian_dice_analysis <- function(roll_data, faces = 20, beta_prior_a = 1, beta_prior_b = 1) {
faces_start <- 1
faces_sep <- 1
# Deal with the d100. It has 10 faces starting at 0 instead of 1 and increasing in increments of 10.
if (faces == 100) {
roll_data <- as.numeric(roll_data)
faces_start <- 0
faces_sep <- 10
}
# Check that no rolls are non-numeric
if (sum(is.na(roll_data)) > 0) {
stop("Non-numeric rolls were found in the data. Please ensure that the data is valid.")
}
# Check that no rolls fall outside 1:faces
if ((sum(roll_data > faces) + sum(roll_data < 0)) > 0) {
stop(sprintf("Values outside the range 0 to %i were found in the data. Please ensure the faces parameter is correct and check that the data is valid.", faces))
}
# Check that alpha and beta are non-negative
if (beta_prior_a < 0 || beta_prior_b < 0) {
stop("The alpha and beta priors must both be non-negtive. Please ensure the values specified are correct.")
}
results_table <- tibble(face = seq(from = faces_start, to = faces_start + (faces - faces_sep), by = faces_sep))
# Figure our the number of successes per face
# Not sure how to do this inside a mutate function below
successes <- c()
for (i in results_table$face) {
successes <- rbind(successes, sum(roll_data == i))
}
# Add columns for the count of binomial successes and failures
results_table <- results_table %>%
mutate(successes = successes,
failures = length(roll_data) - successes)
# Add the values related to the posterior distribution
results_table <- results_table %>%
mutate(beta_post_a = beta_prior_a + successes,
beta_post_b = beta_prior_b + failures,
posterior_mean = beta_post_a / (beta_post_a + beta_post_b),
posterior_median = qbeta(0.5, beta_post_a, beta_post_b),
posterior_mode = (beta_post_a - 1) / (beta_post_a + beta_post_b - 2),
ci_95_lower = qbeta(0.025, beta_post_a, beta_post_b),
ci_95_upper = qbeta(0.975, beta_post_a, beta_post_b))
return(results_table)
}
d10_data <- read_csv("d10.csv")
d10_result <- bayesian_dice_analysis(d10_data$Rolls, faces = 10, beta_prior_a = 10, beta_prior_b = 90)
ggplot(d10_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 0.10, color = "red")) +
scale_x_continuous(breaks = round(seq(from = 0, to = 10, by = 1))) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d10 Dice") +
labs(x = "Face of the Dice",
y = "Posterior Probability Distribution")
d20_data <- read_csv("d20.csv")
d20_result <- bayesian_dice_analysis(d20_data$Rolls, faces = 20, beta_prior_a = 5, beta_prior_b = 95)
ggplot(d20_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 0.05, color = "red")) +
scale_x_continuous(breaks = round(seq(from = 0, to = 20, by = 2))) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d20 Dice") +
labs(x = "Face of the Dice",
y = "Posterior Probability Distribution")
d12_data <- read_csv("d12.csv")
d12_result <- bayesian_dice_analysis(d12_data$Rolls, faces = 12, beta_prior_a = 100/12, beta_prior_b = 11 * 100/12)
ggplot(d12_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 1/12, color = "red")) +
scale_x_continuous(breaks = round(seq(from = 0, to = 12, by = 1))) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d12 Dice") +
labs(x = "Face of the Dice",
y = "Posterior Probability Distribution")
d100_data <- read_csv("d100.csv")
d100_result <- bayesian_dice_analysis(d100_data$Rolls, faces = 100, beta_prior_a = 100/10, beta_prior_b = 9 * 100/10)
ggplot(d100_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 1/10, color = "red")) +
scale_x_continuous(breaks = round(seq(from = 0, to = 100, by = 10))) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d100 Dice") +
labs(x = "Face of the Dice",
y = "Posterior Probability Distribution")
d8_data <- read_csv("d8.csv")
d8_result <- bayesian_dice_analysis(d8_data$Rolls, faces = 8, beta_prior_a = 100/8, beta_prior_b = 7 * 100/8)
ggplot(d8_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 1/8, color = "red")) +
scale_x_continuous(breaks = round(seq(from = 0, to = 8, by = 1))) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d8 Dice") +
labs(x = "Face of the Dice",
y = "Posterior Probability Distribution")
d6_data <- read_csv("d6.csv")
d6_result <- bayesian_dice_analysis(d6_data$Rolls, faces = 6, beta_prior_a = 100/6, beta_prior_b = 5 * 100/6)
ggplot(d6_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 1/6, color = "red")) +
scale_x_continuous(breaks = round(seq(from = 0, to = 6, by = 1))) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d6 Dice") +
labs(x = "Face of the Dice",
y = "Posterior Probability Distribution")
d4_data <- read_csv("d4.csv")
d4_result <- bayesian_dice_analysis(d4_data$Rolls, faces = 4, beta_prior_a = 100/4, beta_prior_b = 3 * 100/4)
ggplot(d4_result, aes(x = face, y = posterior_mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_95_lower, ymax = ci_95_upper), colour = "black", width = 0.1) +
geom_hline(aes(yintercept = 1/4, color = "red")) +
scale_x_continuous(breaks = round(seq(from = 0, to = 4, by = 1))) +
theme(legend.position = "none") +
coord_flip() +
ggtitle("Posterior Probablities for Each Face of My d4 Dice") +
labs(x = "Face of the Dice",
y = "Posterior Probability Distribution")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dirichlet)
library(png)
library(grid)
img <- readPNG("200px-2D-simplex.svg.png")
grid.raster(img)
library(png)
library(grid)
img <- readPNG("200px-2D-simplex.svg.png")
grid.raster(img)
knitr::include_graphics("200px-2D-simplex.svg.png")
